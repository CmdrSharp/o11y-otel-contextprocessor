name: Release Docker image

on:
    workflow_dispatch: { }
    push:
      branches:
        - "main"

env:
    # Default image for the Chart
    DOCKER_IMAGE_NAME: otel-collector
    DOCKER_REGISTRY: ghcr.io/${{ github.repository }}
    DOCKER_BUILD_DIR: '.'

permissions: {}

jobs:
  make:
    permissions:
      contents: write # to push chart release and create a release (helm/chart-releaser-action)
      packages: write
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup golang stable
      uses: actions/setup-go@v5
      with:
        go-version: 'stable'

    - name: Get build versions
      id: versions
      run: |
        awk -F':' '/^[[:blank:]]+otelcol_version[[:blank:]]*:/{ gsub("\"","",$2); gsub(" ", "", $2); print "otelcol-version="$2 }' builder-config.yaml >> $GITHUB_OUTPUT
        awk -F':' '/^[[:blank:]]+output_path[[:blank:]]*:/{ gsub("\"","",$2); gsub(" ", "", $2); print "build-path="$2 }' builder-config.yaml >> $GITHUB_OUTPUT
        awk -F':' '/^[[:blank:]]+version[[:blank:]]*:/{ gsub("\"","",$2); gsub(" ", "", $2); print "version="$2 }' builder-config.yaml >> $GITHUB_OUTPUT
        awk -F':' '/^[[:blank:]]+version[[:blank:]]*:/{ gsub("\"","",$2); gsub(" ", "", $2); print "version="$2 }'

    - name: Download the collector builder
      run: |
        curl -Ss -fL -o ocb https://github.com/open-telemetry/opentelemetry-collector/releases/download/cmd%2Fbuilder%2Fv${VERSION}/ocb_${VERSION}_linux_amd64
        chmod +x ocb
      env:
        VERSION: "${{ steps.versions.outputs.otelcol-version }}"

    - name: Build the OTEL collectory binary
      run: |
        ./ocb --config builder-config.yaml

    - name: Get metadata for Docker image
      if: ${{ github.event_name != 'pull_request' }}
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ghcr.io/${{ github.repository }}/${{ env.DOCKER_IMAGE_NAME }}
        tags: |
          type=raw,value=latest,enable={{is_default_branch}}
          type=ref,event=tag
          type=ref,event=branch
          type=sha

    - name: Log in to the GitHub Container registry
      uses: docker/login-action@v3
      if: ${{ github.event_name != 'pull_request' }}
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push to Github Packages
      uses: docker/build-push-action@v5
      if: ${{ github.event_name != 'pull_request' }}
      with:
        context: ${{ env.DOCKER_BUILD_DIR }}
        push: ${{ github.event_name != 'pull_request' }}
        tags: |
          ${{ steps.meta.outputs.tags }}
          ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:${{ steps.versions.outputs.version }}
        labels: ${{ steps.meta.outputs.labels }}